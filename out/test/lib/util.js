/* ****** automatically generated by jscover - do not edit ******/
if (typeof _$jscoverage === 'undefined') { _$jscoverage = {}; }
/* ****** end - do not edit ******/
function BranchData() {
    this.position = -1;
    this.nodeLength = -1;
    this.src = null;
    this.evalFalse = 0;
    this.evalTrue = 0;

    this.init = function(position, nodeLength, src) {
        this.position = position;
        this.nodeLength = nodeLength;
        this.src = src;
        return this;
    }

    this.ranCondition = function(result) {
        if (result)
            this.evalTrue++;
        else
            this.evalFalse++;
    };

    this.pathsCovered = function() {
        var paths = 0;
        if (this.evalTrue > 0)
          paths++;
        if (this.evalFalse > 0)
          paths++;
        return paths;
    };

    this.covered = function() {
        return this.evalTrue > 0 && this.evalFalse > 0;
    };

    this.toJSON = function() {
        return '{"position":' + this.position
            + ',"nodeLength":' + this.nodeLength
            + ',"src":' + jscoverage_quote(this.src)
            + ',"evalFalse":' + this.evalFalse
            + ',"evalTrue":' + this.evalTrue + '}';
    };

    this.message = function() {
        if (this.evalTrue === 0 && this.evalFalse === 0)
            return 'Condition never evaluated         :\t' + this.src;
        else if (this.evalTrue === 0)
            return 'Condition never evaluated to true :\t' + this.src;
        else if (this.evalFalse === 0)
            return 'Condition never evaluated to false:\t' + this.src;
        else
            return 'Condition covered';
    };
}

BranchData.fromJson = function(jsonString) {
    var json = eval('(' + jsonString + ')');
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

BranchData.fromJsonObject = function(json) {
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

function buildBranchMessage(conditions) {
    var message = 'The following was not covered:';
    for (var i = 0; i < conditions.length; i++) {
        if (conditions[i] !== undefined && conditions[i] !== null && !conditions[i].covered())
          message += '\n- '+ conditions[i].message();
    }
    return message;
};

function convertBranchDataConditionArrayToJSON(branchDataConditionArray) {
    var array = [];
    var length = branchDataConditionArray.length;
    for (var condition = 0; condition < length; condition++) {
        var branchDataObject = branchDataConditionArray[condition];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = branchDataObject.toJSON();
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesToJSON(branchData) {
    if (branchData === undefined) {
        return '[]'
    }
    var array = [];
    var length = branchData.length;
    for (var line = 0; line < length; line++) {
        var branchDataObject = branchData[line];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = convertBranchDataConditionArrayToJSON(branchDataObject);
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesFromJSON(jsonObject) {
    if (jsonObject === undefined) {
        return [];
    }
    var length = jsonObject.length;
    for (var line = 0; line < length; line++) {
        var branchDataJSON = jsonObject[line];
        if (branchDataJSON !== null) {
            for (var conditionIndex = 0; conditionIndex < branchDataJSON.length; conditionIndex ++) {
                var condition = branchDataJSON[conditionIndex];
                if (condition !== null) {
                    branchDataJSON[conditionIndex] = BranchData.fromJsonObject(condition);
                }
            }
        }
    }
    return jsonObject;
}
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
      top.opener._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
      top._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
  this._$jscoverage.branchData = {};
}
if (! _$jscoverage['util.js']) {
  _$jscoverage['util.js'] = [];
  _$jscoverage['util.js'][1] = 0;
  _$jscoverage['util.js'][2] = 0;
  _$jscoverage['util.js'][4] = 0;
  _$jscoverage['util.js'][5] = 0;
  _$jscoverage['util.js'][6] = 0;
  _$jscoverage['util.js'][8] = 0;
  _$jscoverage['util.js'][9] = 0;
  _$jscoverage['util.js'][10] = 0;
  _$jscoverage['util.js'][12] = 0;
  _$jscoverage['util.js'][13] = 0;
  _$jscoverage['util.js'][14] = 0;
  _$jscoverage['util.js'][15] = 0;
  _$jscoverage['util.js'][16] = 0;
  _$jscoverage['util.js'][17] = 0;
  _$jscoverage['util.js'][19] = 0;
  _$jscoverage['util.js'][23] = 0;
  _$jscoverage['util.js'][26] = 0;
  _$jscoverage['util.js'][27] = 0;
  _$jscoverage['util.js'][34] = 0;
  _$jscoverage['util.js'][35] = 0;
  _$jscoverage['util.js'][36] = 0;
  _$jscoverage['util.js'][37] = 0;
  _$jscoverage['util.js'][38] = 0;
  _$jscoverage['util.js'][39] = 0;
  _$jscoverage['util.js'][40] = 0;
  _$jscoverage['util.js'][41] = 0;
  _$jscoverage['util.js'][45] = 0;
}
_$jscoverage['util.js'].source = ["var fs = require('fs');","var patch = require('./patch');","","exports.getUidAndGid = function (changeUser) {","  if (!changeUser) {","    return {};","  }","  var uid = process.getuid();","  if (uid &gt;= 500) {","    return {uid: process.getuid(), gid: process.getgid()}","  }","  var gidFile = '/etc/passwd';","  var str = fs.readFileSync(gidFile, 'utf-8');","  reg  = /[^app]admin:x:+(\\d+):(\\d+)/","  res  = str.match(reg);","  if (!res) {","    return {}","  }","  var user = {","    uid : +res[1],","    gid : +res[2]","  }","  return user;","};","","for ( var key in patch ) {","  exports[key] = patch[key];","}","","/**"," * get local ip"," * @return {String} "," */","exports.getLocalAddress = function() {","  var os = require('os');","  var ifaces = os.networkInterfaces();","  for (var dev in ifaces) {","    for (var l = ifaces[dev].length; l--; ) {","      var details = ifaces[dev][l];","      if (details.family === 'IPv4' &amp;&amp; details.address !== '127.0.0.1') {","        return details.address;","      }","    }","  }","  return null;","}"];
_$jscoverage['util.js'][1]++;
var fs = require('fs');
_$jscoverage['util.js'][2]++;
var patch = require('./patch');
_$jscoverage['util.js'][4]++;
exports.getUidAndGid = function(changeUser) {
  _$jscoverage['util.js'][5]++;
  if (!changeUser) {
    _$jscoverage['util.js'][6]++;
    return {};
  }
  _$jscoverage['util.js'][8]++;
  var uid = process.getuid();
  _$jscoverage['util.js'][9]++;
  if (uid >= 500) {
    _$jscoverage['util.js'][10]++;
    return {
  uid: process.getuid(), 
  gid: process.getgid()};
  }
  _$jscoverage['util.js'][12]++;
  var gidFile = '/etc/passwd';
  _$jscoverage['util.js'][13]++;
  var str = fs.readFileSync(gidFile, 'utf-8');
  _$jscoverage['util.js'][14]++;
  reg = /[^app]admin:x:+(\d+):(\d+)/;
  _$jscoverage['util.js'][15]++;
  res = str.match(reg);
  _$jscoverage['util.js'][16]++;
  if (!res) {
    _$jscoverage['util.js'][17]++;
    return {};
  }
  _$jscoverage['util.js'][19]++;
  var user = {
  uid: +res[1], 
  gid: +res[2]};
  _$jscoverage['util.js'][23]++;
  return user;
};
_$jscoverage['util.js'][26]++;
for (var key in patch) {
  _$jscoverage['util.js'][27]++;
  exports[key] = patch[key];
}
_$jscoverage['util.js'][34]++;
exports.getLocalAddress = function() {
  _$jscoverage['util.js'][35]++;
  var os = require('os');
  _$jscoverage['util.js'][36]++;
  var ifaces = os.networkInterfaces();
  _$jscoverage['util.js'][37]++;
  for (var dev in ifaces) {
    _$jscoverage['util.js'][38]++;
    for (var l = ifaces[dev].length; l--; ) {
      _$jscoverage['util.js'][39]++;
      var details = ifaces[dev][l];
      _$jscoverage['util.js'][40]++;
      if (details.family === 'IPv4' && details.address !== '127.0.0.1') {
        _$jscoverage['util.js'][41]++;
        return details.address;
      }
    }
  }
  _$jscoverage['util.js'][45]++;
  return null;
};
