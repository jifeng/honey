/* ****** automatically generated by jscover - do not edit ******/
if (typeof _$jscoverage === 'undefined') { _$jscoverage = {}; }
/* ****** end - do not edit ******/
function BranchData() {
    this.position = -1;
    this.nodeLength = -1;
    this.src = null;
    this.evalFalse = 0;
    this.evalTrue = 0;

    this.init = function(position, nodeLength, src) {
        this.position = position;
        this.nodeLength = nodeLength;
        this.src = src;
        return this;
    }

    this.ranCondition = function(result) {
        if (result)
            this.evalTrue++;
        else
            this.evalFalse++;
    };

    this.pathsCovered = function() {
        var paths = 0;
        if (this.evalTrue > 0)
          paths++;
        if (this.evalFalse > 0)
          paths++;
        return paths;
    };

    this.covered = function() {
        return this.evalTrue > 0 && this.evalFalse > 0;
    };

    this.toJSON = function() {
        return '{"position":' + this.position
            + ',"nodeLength":' + this.nodeLength
            + ',"src":' + jscoverage_quote(this.src)
            + ',"evalFalse":' + this.evalFalse
            + ',"evalTrue":' + this.evalTrue + '}';
    };

    this.message = function() {
        if (this.evalTrue === 0 && this.evalFalse === 0)
            return 'Condition never evaluated         :\t' + this.src;
        else if (this.evalTrue === 0)
            return 'Condition never evaluated to true :\t' + this.src;
        else if (this.evalFalse === 0)
            return 'Condition never evaluated to false:\t' + this.src;
        else
            return 'Condition covered';
    };
}

BranchData.fromJson = function(jsonString) {
    var json = eval('(' + jsonString + ')');
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

BranchData.fromJsonObject = function(json) {
    var branchData = new BranchData();
    branchData.init(json.position, json.nodeLength, json.src);
    branchData.evalFalse = json.evalFalse;
    branchData.evalTrue = json.evalTrue;
    return branchData;
};

function buildBranchMessage(conditions) {
    var message = 'The following was not covered:';
    for (var i = 0; i < conditions.length; i++) {
        if (conditions[i] !== undefined && conditions[i] !== null && !conditions[i].covered())
          message += '\n- '+ conditions[i].message();
    }
    return message;
};

function convertBranchDataConditionArrayToJSON(branchDataConditionArray) {
    var array = [];
    var length = branchDataConditionArray.length;
    for (var condition = 0; condition < length; condition++) {
        var branchDataObject = branchDataConditionArray[condition];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = branchDataObject.toJSON();
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesToJSON(branchData) {
    if (branchData === undefined) {
        return '[]'
    }
    var array = [];
    var length = branchData.length;
    for (var line = 0; line < length; line++) {
        var branchDataObject = branchData[line];
        if (branchDataObject === undefined || branchDataObject === null) {
            value = 'null';
        } else {
            value = convertBranchDataConditionArrayToJSON(branchDataObject);
        }
        array.push(value);
    }
    return '[' + array.join(',') + ']';
}

function convertBranchDataLinesFromJSON(jsonObject) {
    if (jsonObject === undefined) {
        return [];
    }
    var length = jsonObject.length;
    for (var line = 0; line < length; line++) {
        var branchDataJSON = jsonObject[line];
        if (branchDataJSON !== null) {
            for (var conditionIndex = 0; conditionIndex < branchDataJSON.length; conditionIndex ++) {
                var condition = branchDataJSON[conditionIndex];
                if (condition !== null) {
                    branchDataJSON[conditionIndex] = BranchData.fromJsonObject(condition);
                }
            }
        }
    }
    return jsonObject;
}
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
      top.opener._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
      top._$jscoverage.branchData = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    this._$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (! this._$jscoverage) {
  this._$jscoverage = {};
  this._$jscoverage.branchData = {};
}
if (! _$jscoverage['patch.js']) {
  _$jscoverage['patch.js'] = [];
  _$jscoverage['patch.js'][2] = 0;
  _$jscoverage['patch.js'][4] = 0;
  _$jscoverage['patch.js'][6] = 0;
  _$jscoverage['patch.js'][8] = 0;
  _$jscoverage['patch.js'][10] = 0;
  _$jscoverage['patch.js'][11] = 0;
  _$jscoverage['patch.js'][12] = 0;
  _$jscoverage['patch.js'][13] = 0;
  _$jscoverage['patch.js'][14] = 0;
  _$jscoverage['patch.js'][16] = 0;
  _$jscoverage['patch.js'][17] = 0;
  _$jscoverage['patch.js'][18] = 0;
  _$jscoverage['patch.js'][20] = 0;
  _$jscoverage['patch.js'][23] = 0;
  _$jscoverage['patch.js'][24] = 0;
  _$jscoverage['patch.js'][25] = 0;
  _$jscoverage['patch.js'][26] = 0;
  _$jscoverage['patch.js'][27] = 0;
  _$jscoverage['patch.js'][31] = 0;
  _$jscoverage['patch.js'][32] = 0;
  _$jscoverage['patch.js'][36] = 0;
  _$jscoverage['patch.js'][37] = 0;
  _$jscoverage['patch.js'][40] = 0;
  _$jscoverage['patch.js'][41] = 0;
  _$jscoverage['patch.js'][43] = 0;
  _$jscoverage['patch.js'][44] = 0;
  _$jscoverage['patch.js'][47] = 0;
  _$jscoverage['patch.js'][50] = 0;
  _$jscoverage['patch.js'][51] = 0;
  _$jscoverage['patch.js'][52] = 0;
  _$jscoverage['patch.js'][53] = 0;
  _$jscoverage['patch.js'][55] = 0;
  _$jscoverage['patch.js'][56] = 0;
  _$jscoverage['patch.js'][57] = 0;
  _$jscoverage['patch.js'][58] = 0;
  _$jscoverage['patch.js'][60] = 0;
  _$jscoverage['patch.js'][63] = 0;
  _$jscoverage['patch.js'][64] = 0;
  _$jscoverage['patch.js'][65] = 0;
  _$jscoverage['patch.js'][66] = 0;
  _$jscoverage['patch.js'][67] = 0;
  _$jscoverage['patch.js'][68] = 0;
  _$jscoverage['patch.js'][69] = 0;
  _$jscoverage['patch.js'][70] = 0;
  _$jscoverage['patch.js'][72] = 0;
  _$jscoverage['patch.js'][73] = 0;
  _$jscoverage['patch.js'][74] = 0;
  _$jscoverage['patch.js'][75] = 0;
  _$jscoverage['patch.js'][77] = 0;
  _$jscoverage['patch.js'][79] = 0;
}
_$jscoverage['patch.js'].source = ["// Generated by CoffeeScript 1.7.1","var crypto, fs, path;","","fs = require('fs');","","path = require('path');","","crypto = require('crypto');","","exports.realAllFilename = function(file) {","  var f;","  f = file + '.coffee';","  if (fs.existsSync(f)) {","    return f;","  }","  f = file + '.js';","  if (fs.existsSync(f)) {","    return f;","  }","  return file;","};","","exports.urlFix = function(url, inModule) {","  var basename, ext;","  ext = path.extname(url).toLowerCase();","  basename = url.substr(0, url.length - ext.length);","  switch (ext) {","    case '':","    case '.js':","    case '.coffee':","      url = basename + '.js';","      break;","    case '.css':","    case '.stylus':","    case '.styl':","      url = basename + '.css';","      break;","    case '.html':","    case '.htm':","      url = basename + '.html';","      break;","    case '.jade':","      if (!inModule) {","        url = basename + '.html';","      }","  }","  return url;","};","","exports.md5 = function(data) {","  var chunk, hash, _i, _len;","  if (typeof data === 'string') {","    data = [data];","  }","  hash = crypto.createHash('md5');","  for (_i = 0, _len = data.length; _i &lt; _len; _i++) {","    chunk = data[_i];","    hash.update(chunk);","  }","  return hash.digest('hex');","};","","exports.randRequestId = function() {","  var err, requestId;","  requestId = void 0;","  try {","    requestId = crypto.randomBytes(24).toString('base64');","    requestId = requestId.replace(/\\+/g, '-');","    requestId = requestId.replace(/\\//g, '.');","    requestId = requestId.replace(/\\=/g, '_');","  } catch (_error) {","    err = _error;","    requestId = '';","    while (requestId.length &lt; 32) {","      requestId += (Math.random() * 0xffffffff).toString(36);","    }","    requestId = requestId.substring(0, 32);","  }","  return requestId;","};"];
_$jscoverage['patch.js'][2]++;
var crypto, fs, path;
_$jscoverage['patch.js'][4]++;
fs = require('fs');
_$jscoverage['patch.js'][6]++;
path = require('path');
_$jscoverage['patch.js'][8]++;
crypto = require('crypto');
_$jscoverage['patch.js'][10]++;
exports.realAllFilename = function(file) {
  _$jscoverage['patch.js'][11]++;
  var f;
  _$jscoverage['patch.js'][12]++;
  f = file + '.coffee';
  _$jscoverage['patch.js'][13]++;
  if (fs.existsSync(f)) {
    _$jscoverage['patch.js'][14]++;
    return f;
  }
  _$jscoverage['patch.js'][16]++;
  f = file + '.js';
  _$jscoverage['patch.js'][17]++;
  if (fs.existsSync(f)) {
    _$jscoverage['patch.js'][18]++;
    return f;
  }
  _$jscoverage['patch.js'][20]++;
  return file;
};
_$jscoverage['patch.js'][23]++;
exports.urlFix = function(url, inModule) {
  _$jscoverage['patch.js'][24]++;
  var basename, ext;
  _$jscoverage['patch.js'][25]++;
  ext = path.extname(url).toLowerCase();
  _$jscoverage['patch.js'][26]++;
  basename = url.substr(0, url.length - ext.length);
  _$jscoverage['patch.js'][27]++;
  switch (ext) {
    case '':
    case '.js':
    case '.coffee':
      _$jscoverage['patch.js'][31]++;
      url = basename + '.js';
      _$jscoverage['patch.js'][32]++;
      break;
    case '.css':
    case '.stylus':
    case '.styl':
      _$jscoverage['patch.js'][36]++;
      url = basename + '.css';
      _$jscoverage['patch.js'][37]++;
      break;
    case '.html':
    case '.htm':
      _$jscoverage['patch.js'][40]++;
      url = basename + '.html';
      _$jscoverage['patch.js'][41]++;
      break;
    case '.jade':
      _$jscoverage['patch.js'][43]++;
      if (!inModule) {
        _$jscoverage['patch.js'][44]++;
        url = basename + '.html';
      }
  }
  _$jscoverage['patch.js'][47]++;
  return url;
};
_$jscoverage['patch.js'][50]++;
exports.md5 = function(data) {
  _$jscoverage['patch.js'][51]++;
  var chunk, hash, _i, _len;
  _$jscoverage['patch.js'][52]++;
  if (typeof data === 'string') {
    _$jscoverage['patch.js'][53]++;
    data = [data];
  }
  _$jscoverage['patch.js'][55]++;
  hash = crypto.createHash('md5');
  _$jscoverage['patch.js'][56]++;
  for (_i = 0 , _len = data.length; _i < _len; _i++) {
    _$jscoverage['patch.js'][57]++;
    chunk = data[_i];
    _$jscoverage['patch.js'][58]++;
    hash.update(chunk);
  }
  _$jscoverage['patch.js'][60]++;
  return hash.digest('hex');
};
_$jscoverage['patch.js'][63]++;
exports.randRequestId = function() {
  _$jscoverage['patch.js'][64]++;
  var err, requestId;
  _$jscoverage['patch.js'][65]++;
  requestId = void 0;
  _$jscoverage['patch.js'][66]++;
  try {
    _$jscoverage['patch.js'][67]++;
    requestId = crypto.randomBytes(24).toString('base64');
    _$jscoverage['patch.js'][68]++;
    requestId = requestId.replace(/\+/g, '-');
    _$jscoverage['patch.js'][69]++;
    requestId = requestId.replace(/\//g, '.');
    _$jscoverage['patch.js'][70]++;
    requestId = requestId.replace(/\=/g, '_');
  }  catch (_error) {
  _$jscoverage['patch.js'][72]++;
  err = _error;
  _$jscoverage['patch.js'][73]++;
  requestId = '';
  _$jscoverage['patch.js'][74]++;
  while (requestId.length < 32) {
    _$jscoverage['patch.js'][75]++;
    requestId += (Math.random() * 0xffffffff).toString(36);
  }
  _$jscoverage['patch.js'][77]++;
  requestId = requestId.substring(0, 32);
}
  _$jscoverage['patch.js'][79]++;
  return requestId;
};
