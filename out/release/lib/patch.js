// Generated by CoffeeScript 1.7.1
var crypto, fs, path;

fs = require('fs');

path = require('path');

crypto = require('crypto');

exports.realAllFilename = function(file) {
  var f;
  f = file + '.coffee';
  if (fs.existsSync(f)) {
    return f;
  }
  f = file + '.js';
  if (fs.existsSync(f)) {
    return f;
  }
  return file;
};

exports.urlFix = function(url, inModule) {
  var basename, ext;
  ext = path.extname(url).toLowerCase();
  basename = url.substr(0, url.length - ext.length);
  switch (ext) {
    case '':
    case '.js':
    case '.coffee':
      url = basename + '.js';
      break;
    case '.css':
    case '.stylus':
    case '.styl':
      url = basename + '.css';
      break;
    case '.html':
    case '.htm':
      url = basename + '.html';
      break;
    case '.jade':
      if (!inModule) {
        url = basename + '.html';
      }
  }
  return url;
};

exports.md5 = function(data) {
  var chunk, hash, _i, _len;
  if (typeof data === 'string') {
    data = [data];
  }
  hash = crypto.createHash('md5');
  for (_i = 0, _len = data.length; _i < _len; _i++) {
    chunk = data[_i];
    hash.update(chunk);
  }
  return hash.digest('hex');
};

exports.randRequestId = function() {
  var err, requestId;
  requestId = void 0;
  try {
    requestId = crypto.randomBytes(24).toString('base64');
    requestId = requestId.replace(/\+/g, '-');
    requestId = requestId.replace(/\//g, '.');
    requestId = requestId.replace(/\=/g, '_');
  } catch (_error) {
    err = _error;
    requestId = '';
    while (requestId.length < 32) {
      requestId += (Math.random() * 0xffffffff).toString(36);
    }
    requestId = requestId.substring(0, 32);
  }
  return requestId;
};
